version: '3'

services:

  order-db:
    container_name: order-db
    image: mongo:latest
    restart: always
    networks:
      - choreography-saga
    ports:
      - 27017:27017

  product-db:
    container_name: product-db
    image: postgres:latest
    networks:
      - choreography-saga
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=product
    ports:
      - 5432:5432

  payment-db:
    container_name: payment-db
    image: postgres:latest
    networks:
      - choreography-saga
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=payment
    ports:
      - 5433:5432

  inventory-db:
    container_name: inventory-db
    image: postgres:latest
    networks:
      - choreography-saga
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=inventory
    ports:
      - 5434:5432

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - choreography-saga
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    networks:
      - choreography-saga
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - "kafka"

  order-service:
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    environment:
      MONGO_HOST: mongodb://order-db:27017/order
      BROKER_KAFKA: kafka:29092
    networks:
      - choreography-saga
    depends_on:
      - order-db
      - kafka
    ports:
      - 3000:3000

  product-validation-service:
    container_name: product-validation-service
    build:
      context: ./product-validation-service
      dockerfile: Dockerfile
    environment:
      PG_HOST: jdbc:postgresql://product-db:5432/product
      PG_USER: admin
      PG_PASSWORD: admin
      BROKER_KAFKA: kafka:29092
    networks:
      - choreography-saga
    depends_on:
      - product-db
      - kafka
    ports:
      - 8090:8090

  payment-service:
    container_name: payment-service
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    environment:
      PG_HOST: jdbc:postgresql://payment-db:5432/payment
      PG_USER: admin
      PG_PASSWORD: admin
      BROKER_KAFKA: kafka:29092
    networks:
      - choreography-saga
    depends_on:
      - payment-db
      - kafka
    ports:
      - 8091:8091

  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    environment:
      PG_HOST: jdbc:postgresql://inventory-db:5432/inventory
      PG_USER: admin
      PG_PASSWORD: admin
      BROKER_KAFKA: kafka:29092
    networks:
      - choreography-saga
    depends_on:
      - inventory-db
      - kafka
    ports:
      - 8092:8092

networks:
  choreography-saga:
    driver: bridge